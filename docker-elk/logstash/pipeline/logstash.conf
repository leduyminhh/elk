input {
    beats {
		port => 5044
    }
	jdbc {
		type => "esb_database_request_model"
		schedule => "${JDBC_SCHEDULE}"
		# Postgres jdbc connection string to our database
		jdbc_connection_string => "${DATABASE_TABLE}"
		# The user we wish to execute our statement as
		jdbc_user => "${DATABASE_CONNECTION_USERNAME}"
		jdbc_password => "${DATABASE_CONNECTION_PASSWORD}"
		# The path to our downloaded jdbc driver
		jdbc_driver_library => "${JDBC_DATABASE_URL}"
		# tracking_column_type => "numeric"
		# tracking_column => "id"
		# The name of the driver class for Postgresql
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_fetch_size => 100
		# our query
		statement => "select id, api_name,api_context,app_name,account_name,time_request,ip_address,status_request,message_value as description from request_model"
	}

	jdbc {
		type => "esb_database_esb_api"
		schedule => "${JDBC_SCHEDULE}"
		# Postgres jdbc connection string to our database
		jdbc_connection_string => "${DATABASE_TABLE}"
		# The user we wish to execute our statement as
		jdbc_user => "${DATABASE_CONNECTION_USERNAME}"
		jdbc_password => "${DATABASE_CONNECTION_PASSWORD}"
		# The path to our downloaded jdbc driver
		jdbc_driver_library => "${JDBC_DATABASE_URL}"
		# tracking_column_type => "numeric"
		# tracking_column => "id"
		# The name of the driver class for Postgresql
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_fetch_size => 10
		# our query
		statement => "select * from esb_api"
	}
	jdbc {
		schedule => "${JDBC_SCHEDULE}"
		# Postgres jdbc connection string to our database
		jdbc_connection_string => "${DATABASE_TABLE}"
		# The user we wish to execute our statement as
		jdbc_user => "${DATABASE_CONNECTION_USERNAME}"
		jdbc_password => "${DATABASE_CONNECTION_PASSWORD}"
		# The path to our downloaded jdbc driver
		jdbc_driver_library => "${JDBC_DATABASE_URL}"
		# tracking_column_type => "numeric"
		# tracking_column => "id"
		# The name of the driver class for Postgresql
		jdbc_driver_class => "org.postgresql.Driver"
		jdbc_fetch_size => 10
		# our query
		statement => "select * from esb_account"
		type => "esb_database_esb_account"
	}

	# file {
    # 	path => "/testlog/esb/wso2carbon2copy.log"
	# 	codec => multiline {
	# 		pattern => "^\["
	# 		what => "previous"
	# 		negate => "true"
    #     }
	# 	start_position => beginning
    #     sincedb_path => "/opt/logstash/sincedb-access"
  	# }

}

filter {
	if [input][type] == "filestream" {
		if [fields][system] == "esb" {
				mutate {
					update => {"message" => "%{message}
"} # Không căn lề dòng này, dấu " sát lề.
				} 
				grok {
					match => { "message" => "\[%{TIMESTAMP_ISO8601:date}\] \[%{NUMBER:logcode}\] \[\] \[%{DATA:http_nio}\] %{DATA:type} \{%{GREEDYDATA:info}\} -  %{DATA:logMessage}\n%{GREEDYDATA:remaining}" }
					match => { "message" => "\[%{DATA:dateIndex} %{DATA:time}\] \[%{NUMBER:logCode}\] \[\] \[%{DATA:http_nio}\] %{DATA:type} \{%{GREEDYDATA:info}\} -  %{DATA:logMessage}\n%{GREEDYDATA:remaining}" }
					#match => { "message" => "\[%{TIMESTAMP_ISO8601:date}\] \[%{NUMBER:logCode}\] \[\] \[%{DATA:http_nio}\] %{DATA:type} \{%{GREEDYDATA:info}\} -  %{DATA:logMessage}\n%{GREEDYDATA:remaining}" }	
				}
				mutate {
					# Đổi tên message thành description
					remove_field => ["event"] 
					remove_field => ["tags"] 
					add_field => { "fileName" => "%{[log][file][path]}"}
					add_field => {"description" => "%{[message]}"}
					add_field => {"date" => "%{[dateIndex]} %{[time]}"}
					gsub => [
						# replace - with _ in dateIndex
						"dateIndex", "[-]", "_"
						# # replace _ with - in date
						# "date", "[_]", "-"
					]
				}
				mutate {
					gsub => [
						"date", "_", "-"
					]
				}
			}
		if [fields][system] == "sso" {
				mutate {
					update => {"message" => "%{message}
"} # Không căn lề dòng này, dấu " sát lề.
				} 
				grok {
					match => { "message" => "\[%{DATA:dateIndex} %{DATA:time}\] \[%{NUMBER:logCode}\] \[\] \[%{DATA:http_nio}\] %{DATA:type} \{%{GREEDYDATA:info}\} -  %{DATA:logMessage}\n%{GREEDYDATA:remaining}" }
					#match => { "message" => "\[%{TIMESTAMP_ISO8601:date}\] \[%{NUMBER:logCode}\] \[\] \[%{DATA:http_nio}\] %{DATA:type} \{%{GREEDYDATA:info}\} -  %{DATA:logMessage}\n%{GREEDYDATA:remaining}" }	
				}
				mutate {
					# Đổi tên message thành description
					remove_field => ["event"] 
					remove_field => ["tags"] 
					add_field => { "fileName" => "%{[log][file][path]}"}
					add_field => {"description" => "%{[message]}"}
					add_field => {"date" => "%{[dateIndex]} %{[time]}"}
					gsub => [
						# replace - with _ in dateIndex
						"dateIndex", "[-]", "_"
						# # replace _ with - in date
						# "date", "[_]", "-"
					]
				}
				mutate {
					gsub => [
						"date", "_", "-"
					]
				}
			}

			if [fields][system] == "payment" {
				grok {
					match => { "message" => "\[%{DATA:type}\] %{DATA:dateIndex} %{DATA:time} %{DATA:info} %{DATA:remaining} - %{GREEDYDATA:logMessage}" }
					#match => { "message" => "\[%{DATA:type}\] %{TIMESTAMP_ISO8601:date} %{DATA:info} %{DATA:remaining} - %{GREEDYDATA:logMessage}" }
				}
				mutate {
					remove_field => ["event"]
					remove_field => ["tags"]
					add_field => { "fileName" => "%{[log][file][path]}"}
					add_field => {"description" => "%{[message]}"}
					add_field => {"date" => "%{[dateIndex]} %{[time]}"}
					gsub => [
						"dateIndex", "[-]", "_"
					]
				}
				mutate {
					gsub => [
						"date", "_", "-"
					]
				}
				# mutate {
				# 	# Xóa các field không cần thiết sau cùng
				# 	remove_field => ["message"]
				# }
			}

			if [fields][system] == "dataservices"{
				mutate {
					remove_field => ["event"]
					remove_field => ["tags"]
					remove_field => ["agent"]
					add_field => { "path" => "%{[log][file][path]}"}
					add_field => {"description" => "%{[message]}"}
				}
				grok{
					match => {"path" => "${DATASERVICE_TRACKING_FOLDER_NAME}%{GREEDYDATA:fileName}"}
				}
			}
	}
	else {
		if "esb_database" in [type] {
			if  [type] == "esb_database_request_model" {
					mutate {
						add_field => { "primaryKey" => "%{[type]}_%{[id]}"}
						rename => {"api_name" => "apiName"}
						rename => {"api_context" => "apiContext"}
						rename => {"app_name" => "appName"}
						rename => {"account_name" => "accountName"}
						rename => {"time_request" => "timeRequest"}
						rename => {"ip_address" => "ipAddress"}
						rename => {"status_request" => "statusRequest"}
						rename => {"message_value" => "messageValue"}
						remove_field => ["@version"]
						remove_field => ["@timestamp"]
					}
				}
			if  [type] == "esb_database_esb_api" {
					mutate {
						
						rename => {"esb_api_id" => "esbApiId"}
						rename => {"api_name" => "apiName"}
						rename => {"api_context" => "apiContext"}
						rename => {"provider_id" => "providerId"}
						rename => {"partner_code" => "partnerCode"}
						rename => {"create_date" => "createDate"}
						rename => {"version" => "version"}
						add_field => { "primaryKey" => "%{[type]}_%{[esbApiId]}"}
						remove_field => ["@version"]
						remove_field => ["@timestamp"]
					}
				}
			if  [type] == "esb_database_esb_account" {
					mutate {
			
						rename => {"account_id" => "accountId"}
						rename => {"account_name" => "accountName"}
						rename => {"partner_code" => "partnerCode"}
						rename => {"email" => "email"}
						rename => {"phone_number" => "phoneNumber"}
						rename => {"account_type" => "accountType"}
						rename => {"secret_key" => "secretKey"}
						rename => {"access_key" => "accessKey"}
						rename => {"create_date" => "createDate"}
						rename => {"expiry_date" => "expiryDate"}
						rename => {"status" => "status"}
						rename => {"username" => "userName"}
						add_field => { "primaryKey" => "%{[type]}_%{[accountId]}"}
						remove_field => ["@version"]
						remove_field => ["@timestamp"]
					}
				}
			}
		
	}

}

# filter {
# 	grok {
# 		match => { "message" => "\[%{TIMESTAMP_ISO8601:date}\] \[%{NUMBER:logcode}\] \[\] \[%{GREEDYDATA:http_nio}\] %{GREEDYDATA:type} \{%{GREEDYDATA:service}\} - %{GREEDYDATA:logMessage}(?<description>(.|\r|\n)*)" }
# 	}
# 	mutate {
#         remove_field => ["message"] # we no longer need this field
# 		remove_field => ["event"] # we no longer need this field
# 		remove_field => ["tags"] # we no longer need this field
# 		add_field => { "info" => "[fields][system]}" }
#     }
# }
output {	
	if [input][type] == "filestream" and [fields][system] != "dataservices" {
			elasticsearch {
				hosts => ["${ELASTIC_SEARCH_FIS_ADDRESS}"]
				# hosts => ["${ELASTIC_SEARCH_ADDRESS}"]
				user => "${ELASTIC_USERNAME}"
				password => "${ELASTIC_PASSWORD}"
				index => "%{[fields][system]}_%{[dateIndex]}"
				# document_id => "%{[date]}_%{[]}"

			}

	} else {
		if  "esb_database" in [type] {
			elasticsearch {
				hosts => ["${ELASTIC_SEARCH_FIS_ADDRESS}"]
				# hosts => ["${ELASTIC_SEARCH_ADDRESS}"]
				user => "${ELASTIC_USERNAME}"
				password => "${ELASTIC_PASSWORD}"
				index => "%{[type]}"
				document_id => "%{[primaryKey]}"
				}
			}
		else {
			if [fields][system] == "dataservices"{
					elasticsearch {
						hosts => ["${ELASTIC_SEARCH_FIS_ADDRESS}"]
						# hosts => ["${ELASTIC_SEARCH_ADDRESS}"]
						user => "${ELASTIC_USERNAME}"
						password => "${ELASTIC_PASSWORD}"
						# index => "%{[fields][system]}_%{+YYYY_MM_dd}"
						index => "esb_dataservice_application"
						document_id => "%{[log][file][path]}"
					}
					# stdout {
					# 	codec => rubydebug
					# }
				}
			else {
					elasticsearch {
						hosts => ["${ELASTIC_SEARCH_FIS_ADDRESS}"]
						# hosts => ["${ELASTIC_SEARCH_ADDRESS}"]
						user => "${ELASTIC_USERNAME}"
						password => "${ELASTIC_PASSWORD}"
						# index => "%{[fields][system]}_%{+YYYY_MM_dd}"
						index => "unknown_output_%{+YYYY_MM_dd}"
					}
			}
		}
	}
	
	
	# elasticsearch {
	# 		hosts => ["${ELASTIC_SEARCH_ADDRESS}", "${ELASTIC_SERACH_FIS_ADDRESS}"]
	# 		# hosts => ["${ELASTIC_SEARCH_ADDRESS}"]
	# 		user => "${ELASTIC_USERNAME}"
	# 		password => "${ELASTIC_PASSWORD}"
	# 		# index => "%{[fields][system]}_%{+YYYY_MM_dd}"
	# 		index => "filebeat_%{+YYYY_MM_dd}"
	# 		document_id => "%{[id]}"

	# 	}

	# 	stdout {
	# 		codec => rubydebug
	# 	}

}
