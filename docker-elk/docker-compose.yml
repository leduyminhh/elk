version: '3.7'

services:

  # The 'setup' service runs a one-off script which initializes the
  # 'logstash_internal' and 'kibana_system' users inside Elasticsearch with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ./testlog:/testlog
      - ./postgres:/postgres
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      ELASTIC_SEARCH_ADDRESS: ${ELASTIC_SEARCH_ADDRESS:-}
      ELASTIC_SEARCH_FIS_ADDRESS: ${ELASTIC_SEARCH_FIS_ADDRESS:-}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}

      DATASERVICE_TRACKING_FOLDER_NAME: ${DATASERVICE_TRACKING_FOLDER_NAME:-}
      DATASERVICE_TRACKING_FILE_EXTENSION: ${DATASERVICE_TRACKING_FILE_EXTENSION:-}

      JDBC_DATABASE_URL: ${JDBC_DATABASE_URL:-}
      JDBC_SCHEDULE: ${JDBC_SCHEDULE:-}
      DATABASE_TABLE: ${DATABASE_TABLE:-}
      DATABASE_CONNECTION_USERNAME: ${DATABASE_CONNECTION_USERNAME:-}
      DATABASE_CONNECTION_PASSWORD: ${DATABASE_CONNECTION_PASSWORD:-}
      QUERY: ${QUERY:-}
      TABLE_INDEX_NAME: ${TABLE_INDEX_NAME:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  filebeat:
    build:
      context: extensions/filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # Run as 'root' instead of 'filebeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ./extensions/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - ./testlog:/testlog
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      ELASTIC_SEARCH_ADDRESS: ${ELASTIC_SEARCH_ADDRESS:-}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_ADDRESS: ${LOGSTASH_ADDRESS:-}
      
      ESB_URL: ${ESB_URL:-}
      ESB_SYSTEM_NAME: ${ESB_SYSTEM_NAME:-}

      PAYMENT_URL: ${PAYMENT_URL:-}
      PAYMENT_SYSTEM_NAME: ${PAYMENT_SYSTEM_NAME:-}

      SSO_URL: ${SSO_URL:-}
      SSO_SYSTEM_NAME: ${SSO_SYSTEM_NAME:-}

      DATASERVICE_TRACKING_FOLDER_NAME: ${DATASERVICE_TRACKING_FOLDER_NAME:-}
      DATASERVICE_TRACKING_FILE_EXTENSION: ${DATASERVICE_TRACKING_FILE_EXTENSION:-}

    networks:
      - elk
    depends_on:
      - elasticsearch

networks:
  elk:
    driver: bridge

volumes:
  setup:
  elasticsearch:
